/*
    NCEDC graph

    The event_ncedc graph is constructed here from CSV 
    formatted data, ncedc_csv, inserted into the database. 
    The graph will be combined with other event record 
    graphs to form event_kg.
*/

/*
    Nodes

    The entity and value type constructors defined here are used
    to convert raw data to nodes in the graph of the appropriate type.
*/

// Entities

def event_ncedc:EventRecord = first[ncedc_csv[_]]

def event_ncedc:Contributor = first[event_ncedc:contributed]

@inline def node_map:Contributor = ^Contributor
def edge_map:Contributor = :Source, :contributor

// Values

def node_map:EventId = ^EventId
def edge_map:EventId = :EventID, :event_id

@inline def node_map:ContributorCode = ^ContributorCode
def edge_map:ContributorCode = :Source, :contributor_code

@inline def node_map:CatalogCode = ^CatalogCode
def edge_map:CatalogCode = :Source, :catalog_code

@inline
def necdc_rename_contributor[x] = concat["necdc_",x]

def node_map:Latitude[x] = ^Latitude[x]
def edge_map:Latitude = :Latitude, :at_latitude

def node_map:Longitude[x] = ^Longitude[x]
def edge_map:Longitude = :Longitude, :at_longitude

def node_map:Depth[x] = ^Depth[x]
def edge_map:Depth = :Depth, :at_depth

def node_map:Magnitude[x] = ^Magnitude[x]
def edge_map:Magnitude = :Magnitude, :has_magnitude

@inline def node_map:DateTime[x] = cleanse_datetime[x]
def edge_map:DateTime = :DateTime, :occurred_at

@inline 
def cleanse_datetime[x] = parse_datetime[substring[x, 1, 22], "yyyy/mm/dd HH:MM:SS.ss"]

/* 
    Edges

    These relations define the binary edges in the event_ndk graph.
    They use the edge_map and node_map relations to transform the source
    data into the target schema.
*/


// Events

def event_ncedc =
    (edge_label, event, target);
    (:value, target, target_raw)
    from edge_label, event, target, target_label, target_raw, col_label
    where
        ncedc_csv(col_label, event, target_raw) and
        edge_map[target_label](col_label, edge_label) and
        node_map[target_label](target_raw, target)

// Contributors

def event_ncedc =
    (:contributed, contributor, event);
    (:name, contributor, contributor_name);
    (:code, contributor, contributor_code);
    (:catalog_code, contributor, catalog_code)
    from contributor, event, contributor_code, catalog_code, contributor_name
    where
        event_ncedc:contributor(event, contributor) and
        event_ncedc:contributor_code(event, contributor_code) and
        event_ncedc:value[contributor_code] = contributor_name and
        event_ncedc:catalog_code(event, catalog_code)

/* 
    Source-specific attributes
    
    These are optional, NCEDC-specific edges, in addition to those 
    explicitly defined in the event ontology.
*/

def event_ncedc = col_label, event, target_raw
    from col_label, event, target_raw
    where 
        ncedc_csv(col_label, event, target_raw) and
        not edge_map[_](col_label, _)

/* 
    Integrity Constraints 

    A set of higher-order definitions for integrity constraints is
    defined in the ic_logic module in ic_logic.rel.

    These ic definitions take as arguments the event_ncedc graph, and 
    relations declaring the event graph scheme (event_schema and 
    event_ic) defined in event_model.rel.
*/

// All schema labels must be present in the graph
ic event_schema_label_in_graph(label) { 
    ic_logic:schema_label_in_graph[event_ncedc,event_schema](label) 
}

// Mandatory roles, ex: For every Event, Event has event_id
ic event_src_mandatory(nlabel,elabel) { 
    ic_logic:src_mandatory_role[event_ncedc, event_ic:src_mandatory_role](nlabel, elabel)
}
ic event_tgt_mandatory(nlabel,elabel) { 
    ic_logic:tgt_mandatory_role[event_ncedc, event_ic:tgt_mandatory_role](nlabel, elabel)
}
